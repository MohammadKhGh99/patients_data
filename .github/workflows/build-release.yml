name: Build Release APK

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allows manual trigger

jobs:
  build:
    name: Build Release APK
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.27.0'  # ✅ Updated to match compatible version with Dart 3.8+
        channel: 'stable'
        cache: true

    - name: Check Flutter and Dart versions
      run: |
        flutter --version
        dart --version
        echo "Dart SDK path: $(which dart)"
        echo "Flutter SDK path: $(which flutter)"

    - name: Flutter Doctor
      run: flutter doctor -v

    - name: Create .env file
      run: |
        echo "GOOGLE_OAUTH_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}" > .env
        echo "SENDER_EMAIL=${{ secrets.SENDER_EMAIL }}" >> .env
        echo "SENDER_PASSWORD=${{ secrets.SENDER_PASSWORD }}" >> .env
        echo "RECIPIENT_EMAIL=${{ secrets.RECIPIENT_EMAIL }}" >> .env
        echo "DEBUG_MODE=false" >> .env
        echo "BACKUP_FOLDER_NAME=المعالجة بالرقية الشرعية" >> .env

    - name: Get Dependencies
      run: flutter pub get

    - name: Run Tests (optional)
      run: flutter test --coverage
      continue-on-error: true

    - name: Create Keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/upload-keystore.jks
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "storeFile=upload-keystore.jks" >> android/key.properties

    - name: Build Release APK
      run: flutter build apk --release --verbose

    - name: Build App Bundle (AAB)
      run: flutter build appbundle --release --verbose

    - name: Get current date
      id: date
      run: echo "date=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

    - name: Rename APK with version
      run: |
        cp build/app/outputs/flutter-apk/app-release.apk \
           build/app/outputs/flutter-apk/patients-data-v${{ steps.date.outputs.date }}.apk

    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ steps.date.outputs.date }}
        path: |
          build/app/outputs/flutter-apk/patients-data-v${{ steps.date.outputs.date }}.apk
          build/app/outputs/flutter-apk/app-release.apk
        retention-days: 90

    - name: Upload App Bundle Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-aab-${{ steps.date.outputs.date }}
        path: build/app/outputs/bundle/release/app-release.aab
        retention-days: 90

    - name: Create Release (on tag push)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          build/app/outputs/flutter-apk/patients-data-v${{ steps.date.outputs.date }}.apk
          build/app/outputs/bundle/release/app-release.aab
        body: |
          ## 🚀 Release Notes
          
          ### 📱 Downloads
          - **APK**: Direct installation file for Android devices
          - **AAB**: App Bundle for Google Play Store deployment
          
          ### ✨ Features
          - Patient management system
          - Arabic language support
          - Google Drive backup integration
          - Email backup functionality
          - CSV export capability
          
          ### 🔧 Installation
          1. Download the APK file
          2. Enable "Install from unknown sources" on your Android device
          3. Install the APK
          
          **Build Date**: ${{ steps.date.outputs.date }}
          **Commit**: ${{ github.sha }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Build Summary
      run: |
        echo "## 🎉 Build Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Build Information:" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Date**: ${{ steps.date.outputs.date }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Flutter Version**: $(flutter --version | head -n 1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Generated Files:" >> $GITHUB_STEP_SUMMARY
        echo "- APK: \`patients-data-v${{ steps.date.outputs.date }}.apk\`" >> $GITHUB_STEP_SUMMARY
        echo "- AAB: \`app-release.aab\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 Download:" >> $GITHUB_STEP_SUMMARY
        echo "Check the **Artifacts** section below to download the built files." >> $GITHUB_STEP_SUMMARY